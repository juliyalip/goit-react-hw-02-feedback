{"version":3,"sources":["components/Section.js","components/FeedbackOptions.js","components/Notification.js","components/Statistics.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","clickGood","type","onClick","id","Notification","message","Statistics","prop","total","positivePercentage","good","neutral","bad","App","state","hangleAdd","ev","target","setState","prevState","countTotalFeedback","Object","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAUeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,oCACI,6BAAKD,IACJC,MCMEC,EAXS,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACvB,OACI,gCACI,wBAAQC,KAAK,SAASC,QAASF,EAAWG,GAAG,OAA7C,kBACA,wBAAQF,KAAK,SAASC,QAASF,EAAWG,GAAG,UAA7C,qBACA,wBAAQF,KAAK,SAASC,QAASF,EAAWG,GAAG,MAA7C,qBCEGC,EANM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,6BAAKA,KCUEC,EAbI,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC5B,OACC,+BACI,wCAAWF,EAAKG,QAChB,2CAAcH,EAAKI,WAChB,uCAAUJ,EAAKK,OACf,yCAAYJ,EAAZ,OACA,qDAAyBC,EAAzB,WCEMI,E,4MAInBC,MAAQ,CACNJ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAIPG,UAAY,SAAAC,GACW,SAAjBA,EAAGC,OAAOd,GACd,EAAKe,UAAS,SAACC,GAAD,MAAgB,CAACT,KAAMS,EAAUT,KAAO,MAG5B,YAAjBM,EAAGC,OAAOd,GACjB,EAAKe,UAAS,SAACC,GAAD,MAAgB,CAC5BR,QAASQ,EAAUR,QAAU,MAGR,QAAjBK,EAAGC,OAAOd,IAChB,EAAKe,UAAS,SAACC,GAAD,MAAgB,CAACP,IAAIO,EAAUP,IAAM,O,EAQvDQ,mBAAqB,WACtB,OAAOC,OAAOC,OAAO,EAAKR,OAAOS,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,IAAO,I,EAGpEC,gCAAkC,WAEhC,OADiBC,KAAKC,MAAM,IAAM,EAAKd,MAAMJ,KAAO,EAAKU,uB,uDAOzD,OACE,qCACE,eAAC,EAAD,CAASvB,MAAM,wBAAf,UACE,cAAC,EAAD,CAAiBG,UAAW6B,KAAKd,YACjC,cAAC,EAAD,CAAcV,QAAQ,yBAGxB,cAAC,EAAD,CAAYE,KAAMsB,KAAKf,MAAON,MAAOqB,KAAKT,qBAAsBX,mBAAoBoB,KAAKH,2C,GAjDhEI,aCHjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e1362602.chunk.js","sourcesContent":["\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section>\r\n            <h1>{title}</h1>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Section","const FeedbackOptions = ({ clickGood }) => {\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={clickGood} id=\"good\">good</button>\r\n            <button type=\"button\" onClick={clickGood} id=\"neutral\">neutral</button>\r\n            <button type=\"button\" onClick={clickGood} id=\"bad\">bad</button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","\r\nconst Notification = ({message}) => {\r\n    return (\r\n        <h2>{message }</h2>\r\n    )\r\n}\r\n\r\nexport default Notification;","const Statistics = ({ prop, total, positivePercentage }) => {\r\n       return (\r\n        <ul>\r\n            <li>Good: {prop.good}</li>\r\n            <li>Neutral: {prop.neutral}</li>\r\n               <li>Bad: {prop.bad}</li>\r\n               <li>Total: {total} </li>\r\n               <li>Positive feedback: { positivePercentage}%</li>\r\n        </ul>\r\n           \r\n    )\r\n}\r\n\r\nexport default Statistics;","import  {Component} from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Notification from './components/Notification';\nimport Statistics from './components/Statistics';\n\n\n\nexport default class App extends Component {\n\n\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n\n  };\n\n  hangleAdd = ev => {\n    if (ev.target.id === 'good') {\n    this.setState((prevState) => ({good: prevState.good + 1}))\n    }\n    \n    else if (ev.target.id === 'neutral') {\n      this.setState((prevState) =>( {\n        neutral: prevState.neutral + 1\n      }))\n    }\n    else if(ev.target.id === 'bad') {\n      this.setState((prevState) => ({bad:prevState.bad + 1})\n\n      )\n    }\n  }\n  \n\n  \n  countTotalFeedback = () => {\n return Object.values(this.state).reduce((acc, value) => acc + value, 0)\n  }\n  \n  countPositiveFeedbackPercentage = () => {\n    const positive = Math.round(100 * this.state.good / this.countTotalFeedback());\n    return positive \n  }\n  \n  render() {\n\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions clickGood={this.hangleAdd } />\n          <Notification message=\"No feedback given\" />\n        </Section>\n             \n        <Statistics prop={this.state} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage() }/>\n      </>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}